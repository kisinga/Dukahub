/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": typeof types.GetActiveAdministratorDocument,
    "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n": typeof types.LogoutDocument,
    "\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": typeof types.UpdateAdministratorDocument,
    "\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n": typeof types.GetUserChannelsDocument,
    "\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      defaultCurrencyCode\n      customFields {\n        mlModelJsonAsset {\n          id\n          source\n          name\n        }\n        mlModelBinAsset {\n          id\n          source\n          name\n        }\n        mlMetadataAsset {\n          id\n          source\n          name\n        }\n        companyLogoAsset {\n          id\n          source\n          name\n          preview\n        }\n        cashierFlowEnabled\n        cashierOpen\n      }\n    }\n  }\n": typeof types.GetActiveChannelDocument,
    "\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n": typeof types.GetStockLocationsDocument,
    "\n  query CheckSkuExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.CheckSkuExistsDocument,
    "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        stockOnHand\n      }\n    }\n  }\n": typeof types.CreateProductDocument,
    "\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n": typeof types.CreateProductVariantsDocument,
    "\n  mutation CreateAssets($input: [CreateAssetInput!]!) {\n    createAssets(input: $input) {\n      ... on Asset {\n        id\n        name\n        preview\n        source\n      }\n    }\n  }\n": typeof types.CreateAssetsDocument,
    "\n  mutation AssignAssetsToProduct($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n": typeof types.AssignAssetsToProductDocument,
    "\n  mutation DeleteAsset($input: DeleteAssetInput!) {\n    deleteAsset(input: $input) {\n      result\n      message\n    }\n  }\n": typeof types.DeleteAssetDocument,
    "\n  mutation UpdateProductAssets($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n": typeof types.UpdateProductAssetsDocument,
    "\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProductDetailDocument,
    "\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProductsDocument,
    "\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id) {\n      result\n      message\n    }\n  }\n": typeof types.DeleteProductDocument,
    "\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n": typeof types.CreateProductOptionGroupDocument,
    "\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n": typeof types.CreateProductOptionDocument,
    "\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n": typeof types.AddOptionGroupToProductDocument,
    "\n  mutation UpdateProductVariant($input: UpdateProductVariantInput!) {\n    updateProductVariant(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n": typeof types.UpdateProductVariantDocument,
    "\n  query SearchProducts($term: String!) {\n    products(options: { \n      filter: { \n        name: { contains: $term }\n      },\n      take: 5 \n    }) {\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n": typeof types.SearchProductsDocument,
    "\n  query GetProduct($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      featuredAsset {\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          stockLocationId\n          stockOnHand\n        }\n      }\n    }\n  }\n": typeof types.GetProductDocument,
    "\n  query SearchByBarcode($sku: String!) {\n    search(input: { term: $sku, take: 1 }) {\n      items {\n        productId\n        productName\n        productVariantId\n        productVariantName\n        sku\n        priceWithTax {\n          ... on SinglePrice {\n            value\n          }\n        }\n        productAsset {\n          preview\n        }\n      }\n    }\n  }\n": typeof types.SearchByBarcodeDocument,
    "\n  query PrefetchProducts($take: Int!) {\n    products(options: { take: $take, skip: 0 }) {\n      totalItems\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n": typeof types.PrefetchProductsDocument,
    "\n  query GetOrdersForPeriod($startDate: DateTime!) {\n    orders(options: { \n      filter: { \n        orderPlacedAt: { after: $startDate }\n      }\n      take: 1000\n    }) {\n      items {\n        id\n        total\n        totalWithTax\n        orderPlacedAt\n        state\n      }\n    }\n  }\n": typeof types.GetOrdersForPeriodDocument,
    "\n  query GetProductStats {\n    products(options: { take: 1 }) {\n      totalItems\n    }\n    productVariants(options: { take: 1 }) {\n      totalItems\n    }\n  }\n": typeof types.GetProductStatsDocument,
    "\n  query GetRecentOrders {\n    orders(options: { take: 10, sort: { createdAt: DESC } }) {\n      items {\n        id\n        code\n        total\n        totalWithTax\n        state\n        createdAt\n        currencyCode\n        lines {\n          id\n          productVariant {\n            name\n          }\n          quantity\n        }\n      }\n    }\n  }\n": typeof types.GetRecentOrdersDocument,
    "\n  mutation CreateDraftOrder {\n    createDraftOrder {\n      id\n      code\n      state\n      total\n      totalWithTax\n    }\n  }\n": typeof types.CreateDraftOrderDocument,
    "\n  mutation AddItemToDraftOrder($orderId: ID!, $input: AddItemToDraftOrderInput!) {\n    addItemToDraftOrder(orderId: $orderId, input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        lines {\n          id\n          quantity\n          linePrice\n          linePriceWithTax\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.AddItemToDraftOrderDocument,
    "\n  mutation AddManualPaymentToOrder($input: ManualPaymentInput!) {\n    addManualPaymentToOrder(input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        payments {\n          id\n          state\n          amount\n          method\n          metadata\n        }\n      }\n      ... on ManualPaymentStateError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.AddManualPaymentToOrderDocument,
    "\n  mutation TransitionOrderToState($id: ID!, $state: String!) {\n    transitionOrderToState(id: $id, state: $state) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        lines {\n          id\n          quantity\n          linePrice\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n      ... on OrderStateTransitionError {\n        errorCode\n        message\n        transitionError\n      }\n    }\n  }\n": typeof types.TransitionOrderToStateDocument,
    "\n  query GetPaymentMethods {\n    paymentMethods(options: { take: 100 }) {\n      items {\n        id\n        code\n        name\n        description\n        enabled\n        customFields {\n          imageAsset {\n            id\n            source\n            name\n            preview\n          }\n          isActive\n        }\n      }\n    }\n  }\n": typeof types.GetPaymentMethodsDocument,
    "\n  query GetOrder($id: ID!) {\n    order(id: $id) {\n      id\n      code\n      state\n      total\n      totalWithTax\n      lines {\n        id\n        quantity\n        linePrice\n        linePriceWithTax\n        productVariant {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.GetOrderDocument,
    "\n  query GetMlTrainingInfo($channelId: ID!) {\n    mlTrainingInfo(channelId: $channelId) {\n      status\n      progress\n      startedAt\n      error\n      productCount\n      imageCount\n      hasActiveModel\n      lastTrainedAt\n    }\n  }\n": typeof types.GetMlTrainingInfoDocument,
    "\n  query GetMlTrainingManifest($channelId: ID!) {\n    mlTrainingManifest(channelId: $channelId) {\n      channelId\n      version\n      extractedAt\n      products {\n        productId\n        productName\n        images {\n          assetId\n          url\n          filename\n        }\n      }\n    }\n  }\n": typeof types.GetMlTrainingManifestDocument,
    "\n  mutation ExtractPhotosForTraining($channelId: ID!) {\n    extractPhotosForTraining(channelId: $channelId)\n  }\n": typeof types.ExtractPhotosForTrainingDocument,
    "\n  mutation UpdateTrainingStatus($channelId: ID!, $status: String!, $progress: Int, $error: String) {\n    updateTrainingStatus(channelId: $channelId, status: $status, progress: $progress, error: $error)\n  }\n": typeof types.UpdateTrainingStatusDocument,
    "\n  mutation CompleteTraining($channelId: ID!, $modelJson: Upload!, $weightsFile: Upload!, $metadata: Upload!) {\n    completeTraining(channelId: $channelId, modelJson: $modelJson, weightsFile: $weightsFile, metadata: $metadata)\n  }\n": typeof types.CompleteTrainingDocument,
    "\n  query GetCustomers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n        user {\n          id\n          identifier\n          verified\n        }\n      }\n    }\n  }\n": typeof types.GetCustomersDocument,
    "\n  query GetCustomer($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n      user {\n        id\n        identifier\n        verified\n      }\n    }\n  }\n": typeof types.GetCustomerDocument,
    "\n  mutation CreateCustomer($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.CreateCustomerDocument,
    "\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.UpdateCustomerDocument,
    "\n  mutation DeleteCustomer($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n": typeof types.DeleteCustomerDocument,
    "\n  mutation CreateCustomerAddress($customerId: ID!, $input: CreateAddressInput!) {\n    createCustomerAddress(customerId: $customerId, input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n": typeof types.CreateCustomerAddressDocument,
    "\n  mutation UpdateCustomerAddress($input: UpdateAddressInput!) {\n    updateCustomerAddress(input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n": typeof types.UpdateCustomerAddressDocument,
    "\n  mutation DeleteCustomerAddress($id: ID!) {\n    deleteCustomerAddress(id: $id) {\n      success\n    }\n  }\n": typeof types.DeleteCustomerAddressDocument,
    "\n  query GetSuppliers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n      }\n    }\n  }\n": typeof types.GetSuppliersDocument,
    "\n  query GetSupplier($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n    }\n  }\n": typeof types.GetSupplierDocument,
    "\n  mutation CreateSupplier($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.CreateSupplierDocument,
    "\n  mutation UpdateSupplier($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.UpdateSupplierDocument,
    "\n  mutation DeleteSupplier($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n": typeof types.DeleteSupplierDocument,
};
const documents: Documents = {
    "\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": types.GetActiveAdministratorDocument,
    "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n": types.LogoutDocument,
    "\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": types.UpdateAdministratorDocument,
    "\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n": types.GetUserChannelsDocument,
    "\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      defaultCurrencyCode\n      customFields {\n        mlModelJsonAsset {\n          id\n          source\n          name\n        }\n        mlModelBinAsset {\n          id\n          source\n          name\n        }\n        mlMetadataAsset {\n          id\n          source\n          name\n        }\n        companyLogoAsset {\n          id\n          source\n          name\n          preview\n        }\n        cashierFlowEnabled\n        cashierOpen\n      }\n    }\n  }\n": types.GetActiveChannelDocument,
    "\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n": types.GetStockLocationsDocument,
    "\n  query CheckSkuExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CheckSkuExistsDocument,
    "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        stockOnHand\n      }\n    }\n  }\n": types.CreateProductDocument,
    "\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n": types.CreateProductVariantsDocument,
    "\n  mutation CreateAssets($input: [CreateAssetInput!]!) {\n    createAssets(input: $input) {\n      ... on Asset {\n        id\n        name\n        preview\n        source\n      }\n    }\n  }\n": types.CreateAssetsDocument,
    "\n  mutation AssignAssetsToProduct($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n": types.AssignAssetsToProductDocument,
    "\n  mutation DeleteAsset($input: DeleteAssetInput!) {\n    deleteAsset(input: $input) {\n      result\n      message\n    }\n  }\n": types.DeleteAssetDocument,
    "\n  mutation UpdateProductAssets($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n": types.UpdateProductAssetsDocument,
    "\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetProductDetailDocument,
    "\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsDocument,
    "\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id) {\n      result\n      message\n    }\n  }\n": types.DeleteProductDocument,
    "\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n": types.CreateProductOptionGroupDocument,
    "\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n": types.CreateProductOptionDocument,
    "\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n": types.AddOptionGroupToProductDocument,
    "\n  mutation UpdateProductVariant($input: UpdateProductVariantInput!) {\n    updateProductVariant(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n": types.UpdateProductVariantDocument,
    "\n  query SearchProducts($term: String!) {\n    products(options: { \n      filter: { \n        name: { contains: $term }\n      },\n      take: 5 \n    }) {\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n": types.SearchProductsDocument,
    "\n  query GetProduct($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      featuredAsset {\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          stockLocationId\n          stockOnHand\n        }\n      }\n    }\n  }\n": types.GetProductDocument,
    "\n  query SearchByBarcode($sku: String!) {\n    search(input: { term: $sku, take: 1 }) {\n      items {\n        productId\n        productName\n        productVariantId\n        productVariantName\n        sku\n        priceWithTax {\n          ... on SinglePrice {\n            value\n          }\n        }\n        productAsset {\n          preview\n        }\n      }\n    }\n  }\n": types.SearchByBarcodeDocument,
    "\n  query PrefetchProducts($take: Int!) {\n    products(options: { take: $take, skip: 0 }) {\n      totalItems\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n": types.PrefetchProductsDocument,
    "\n  query GetOrdersForPeriod($startDate: DateTime!) {\n    orders(options: { \n      filter: { \n        orderPlacedAt: { after: $startDate }\n      }\n      take: 1000\n    }) {\n      items {\n        id\n        total\n        totalWithTax\n        orderPlacedAt\n        state\n      }\n    }\n  }\n": types.GetOrdersForPeriodDocument,
    "\n  query GetProductStats {\n    products(options: { take: 1 }) {\n      totalItems\n    }\n    productVariants(options: { take: 1 }) {\n      totalItems\n    }\n  }\n": types.GetProductStatsDocument,
    "\n  query GetRecentOrders {\n    orders(options: { take: 10, sort: { createdAt: DESC } }) {\n      items {\n        id\n        code\n        total\n        totalWithTax\n        state\n        createdAt\n        currencyCode\n        lines {\n          id\n          productVariant {\n            name\n          }\n          quantity\n        }\n      }\n    }\n  }\n": types.GetRecentOrdersDocument,
    "\n  mutation CreateDraftOrder {\n    createDraftOrder {\n      id\n      code\n      state\n      total\n      totalWithTax\n    }\n  }\n": types.CreateDraftOrderDocument,
    "\n  mutation AddItemToDraftOrder($orderId: ID!, $input: AddItemToDraftOrderInput!) {\n    addItemToDraftOrder(orderId: $orderId, input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        lines {\n          id\n          quantity\n          linePrice\n          linePriceWithTax\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.AddItemToDraftOrderDocument,
    "\n  mutation AddManualPaymentToOrder($input: ManualPaymentInput!) {\n    addManualPaymentToOrder(input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        payments {\n          id\n          state\n          amount\n          method\n          metadata\n        }\n      }\n      ... on ManualPaymentStateError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.AddManualPaymentToOrderDocument,
    "\n  mutation TransitionOrderToState($id: ID!, $state: String!) {\n    transitionOrderToState(id: $id, state: $state) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        lines {\n          id\n          quantity\n          linePrice\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n      ... on OrderStateTransitionError {\n        errorCode\n        message\n        transitionError\n      }\n    }\n  }\n": types.TransitionOrderToStateDocument,
    "\n  query GetPaymentMethods {\n    paymentMethods(options: { take: 100 }) {\n      items {\n        id\n        code\n        name\n        description\n        enabled\n        customFields {\n          imageAsset {\n            id\n            source\n            name\n            preview\n          }\n          isActive\n        }\n      }\n    }\n  }\n": types.GetPaymentMethodsDocument,
    "\n  query GetOrder($id: ID!) {\n    order(id: $id) {\n      id\n      code\n      state\n      total\n      totalWithTax\n      lines {\n        id\n        quantity\n        linePrice\n        linePriceWithTax\n        productVariant {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetOrderDocument,
    "\n  query GetMlTrainingInfo($channelId: ID!) {\n    mlTrainingInfo(channelId: $channelId) {\n      status\n      progress\n      startedAt\n      error\n      productCount\n      imageCount\n      hasActiveModel\n      lastTrainedAt\n    }\n  }\n": types.GetMlTrainingInfoDocument,
    "\n  query GetMlTrainingManifest($channelId: ID!) {\n    mlTrainingManifest(channelId: $channelId) {\n      channelId\n      version\n      extractedAt\n      products {\n        productId\n        productName\n        images {\n          assetId\n          url\n          filename\n        }\n      }\n    }\n  }\n": types.GetMlTrainingManifestDocument,
    "\n  mutation ExtractPhotosForTraining($channelId: ID!) {\n    extractPhotosForTraining(channelId: $channelId)\n  }\n": types.ExtractPhotosForTrainingDocument,
    "\n  mutation UpdateTrainingStatus($channelId: ID!, $status: String!, $progress: Int, $error: String) {\n    updateTrainingStatus(channelId: $channelId, status: $status, progress: $progress, error: $error)\n  }\n": types.UpdateTrainingStatusDocument,
    "\n  mutation CompleteTraining($channelId: ID!, $modelJson: Upload!, $weightsFile: Upload!, $metadata: Upload!) {\n    completeTraining(channelId: $channelId, modelJson: $modelJson, weightsFile: $weightsFile, metadata: $metadata)\n  }\n": types.CompleteTrainingDocument,
    "\n  query GetCustomers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n        user {\n          id\n          identifier\n          verified\n        }\n      }\n    }\n  }\n": types.GetCustomersDocument,
    "\n  query GetCustomer($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n      user {\n        id\n        identifier\n        verified\n      }\n    }\n  }\n": types.GetCustomerDocument,
    "\n  mutation CreateCustomer($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.CreateCustomerDocument,
    "\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.UpdateCustomerDocument,
    "\n  mutation DeleteCustomer($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n": types.DeleteCustomerDocument,
    "\n  mutation CreateCustomerAddress($customerId: ID!, $input: CreateAddressInput!) {\n    createCustomerAddress(customerId: $customerId, input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n": types.CreateCustomerAddressDocument,
    "\n  mutation UpdateCustomerAddress($input: UpdateAddressInput!) {\n    updateCustomerAddress(input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n": types.UpdateCustomerAddressDocument,
    "\n  mutation DeleteCustomerAddress($id: ID!) {\n    deleteCustomerAddress(id: $id) {\n      success\n    }\n  }\n": types.DeleteCustomerAddressDocument,
    "\n  query GetSuppliers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n      }\n    }\n  }\n": types.GetSuppliersDocument,
    "\n  query GetSupplier($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n    }\n  }\n": types.GetSupplierDocument,
    "\n  mutation CreateSupplier($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.CreateSupplierDocument,
    "\n  mutation UpdateSupplier($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.UpdateSupplierDocument,
    "\n  mutation DeleteSupplier($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n": types.DeleteSupplierDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"): (typeof documents)["\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      defaultCurrencyCode\n      customFields {\n        mlModelJsonAsset {\n          id\n          source\n          name\n        }\n        mlModelBinAsset {\n          id\n          source\n          name\n        }\n        mlMetadataAsset {\n          id\n          source\n          name\n        }\n        companyLogoAsset {\n          id\n          source\n          name\n          preview\n        }\n        cashierFlowEnabled\n        cashierOpen\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      defaultCurrencyCode\n      customFields {\n        mlModelJsonAsset {\n          id\n          source\n          name\n        }\n        mlModelBinAsset {\n          id\n          source\n          name\n        }\n        mlMetadataAsset {\n          id\n          source\n          name\n        }\n        companyLogoAsset {\n          id\n          source\n          name\n          preview\n        }\n        cashierFlowEnabled\n        cashierOpen\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckSkuExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CheckSkuExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        stockOnHand\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        stockOnHand\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAssets($input: [CreateAssetInput!]!) {\n    createAssets(input: $input) {\n      ... on Asset {\n        id\n        name\n        preview\n        source\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAssets($input: [CreateAssetInput!]!) {\n    createAssets(input: $input) {\n      ... on Asset {\n        id\n        name\n        preview\n        source\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AssignAssetsToProduct($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AssignAssetsToProduct($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAsset($input: DeleteAssetInput!) {\n    deleteAsset(input: $input) {\n      result\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAsset($input: DeleteAssetInput!) {\n    deleteAsset(input: $input) {\n      result\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProductAssets($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProductAssets($productId: ID!, $assetIds: [ID!]!, $featuredAssetId: ID) {\n    updateProduct(input: { id: $productId, assetIds: $assetIds, featuredAssetId: $featuredAssetId }) {\n      id\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      assets {\n        id\n        name\n        preview\n        source\n      }\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id) {\n      result\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id) {\n      result\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProductVariant($input: UpdateProductVariantInput!) {\n    updateProductVariant(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProductVariant($input: UpdateProductVariantInput!) {\n    updateProductVariant(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchProducts($term: String!) {\n    products(options: { \n      filter: { \n        name: { contains: $term }\n      },\n      take: 5 \n    }) {\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchProducts($term: String!) {\n    products(options: { \n      filter: { \n        name: { contains: $term }\n      },\n      take: 5 \n    }) {\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProduct($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      featuredAsset {\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          stockLocationId\n          stockOnHand\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProduct($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      featuredAsset {\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        prices {\n          price\n          currencyCode\n        }\n        stockLevels {\n          stockLocationId\n          stockOnHand\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchByBarcode($sku: String!) {\n    search(input: { term: $sku, take: 1 }) {\n      items {\n        productId\n        productName\n        productVariantId\n        productVariantName\n        sku\n        priceWithTax {\n          ... on SinglePrice {\n            value\n          }\n        }\n        productAsset {\n          preview\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchByBarcode($sku: String!) {\n    search(input: { term: $sku, take: 1 }) {\n      items {\n        productId\n        productName\n        productVariantId\n        productVariantName\n        sku\n        priceWithTax {\n          ... on SinglePrice {\n            value\n          }\n        }\n        productAsset {\n          preview\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PrefetchProducts($take: Int!) {\n    products(options: { take: $take, skip: 0 }) {\n      totalItems\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PrefetchProducts($take: Int!) {\n    products(options: { take: $take, skip: 0 }) {\n      totalItems\n      items {\n        id\n        name\n        featuredAsset {\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n          prices {\n            price\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrdersForPeriod($startDate: DateTime!) {\n    orders(options: { \n      filter: { \n        orderPlacedAt: { after: $startDate }\n      }\n      take: 1000\n    }) {\n      items {\n        id\n        total\n        totalWithTax\n        orderPlacedAt\n        state\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrdersForPeriod($startDate: DateTime!) {\n    orders(options: { \n      filter: { \n        orderPlacedAt: { after: $startDate }\n      }\n      take: 1000\n    }) {\n      items {\n        id\n        total\n        totalWithTax\n        orderPlacedAt\n        state\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductStats {\n    products(options: { take: 1 }) {\n      totalItems\n    }\n    productVariants(options: { take: 1 }) {\n      totalItems\n    }\n  }\n"): (typeof documents)["\n  query GetProductStats {\n    products(options: { take: 1 }) {\n      totalItems\n    }\n    productVariants(options: { take: 1 }) {\n      totalItems\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRecentOrders {\n    orders(options: { take: 10, sort: { createdAt: DESC } }) {\n      items {\n        id\n        code\n        total\n        totalWithTax\n        state\n        createdAt\n        currencyCode\n        lines {\n          id\n          productVariant {\n            name\n          }\n          quantity\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRecentOrders {\n    orders(options: { take: 10, sort: { createdAt: DESC } }) {\n      items {\n        id\n        code\n        total\n        totalWithTax\n        state\n        createdAt\n        currencyCode\n        lines {\n          id\n          productVariant {\n            name\n          }\n          quantity\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateDraftOrder {\n    createDraftOrder {\n      id\n      code\n      state\n      total\n      totalWithTax\n    }\n  }\n"): (typeof documents)["\n  mutation CreateDraftOrder {\n    createDraftOrder {\n      id\n      code\n      state\n      total\n      totalWithTax\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddItemToDraftOrder($orderId: ID!, $input: AddItemToDraftOrderInput!) {\n    addItemToDraftOrder(orderId: $orderId, input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        lines {\n          id\n          quantity\n          linePrice\n          linePriceWithTax\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddItemToDraftOrder($orderId: ID!, $input: AddItemToDraftOrderInput!) {\n    addItemToDraftOrder(orderId: $orderId, input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        lines {\n          id\n          quantity\n          linePrice\n          linePriceWithTax\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddManualPaymentToOrder($input: ManualPaymentInput!) {\n    addManualPaymentToOrder(input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        payments {\n          id\n          state\n          amount\n          method\n          metadata\n        }\n      }\n      ... on ManualPaymentStateError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddManualPaymentToOrder($input: ManualPaymentInput!) {\n    addManualPaymentToOrder(input: $input) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        payments {\n          id\n          state\n          amount\n          method\n          metadata\n        }\n      }\n      ... on ManualPaymentStateError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TransitionOrderToState($id: ID!, $state: String!) {\n    transitionOrderToState(id: $id, state: $state) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        lines {\n          id\n          quantity\n          linePrice\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n      ... on OrderStateTransitionError {\n        errorCode\n        message\n        transitionError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TransitionOrderToState($id: ID!, $state: String!) {\n    transitionOrderToState(id: $id, state: $state) {\n      ... on Order {\n        id\n        code\n        state\n        total\n        totalWithTax\n        lines {\n          id\n          quantity\n          linePrice\n          productVariant {\n            id\n            name\n          }\n        }\n      }\n      ... on OrderStateTransitionError {\n        errorCode\n        message\n        transitionError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPaymentMethods {\n    paymentMethods(options: { take: 100 }) {\n      items {\n        id\n        code\n        name\n        description\n        enabled\n        customFields {\n          imageAsset {\n            id\n            source\n            name\n            preview\n          }\n          isActive\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPaymentMethods {\n    paymentMethods(options: { take: 100 }) {\n      items {\n        id\n        code\n        name\n        description\n        enabled\n        customFields {\n          imageAsset {\n            id\n            source\n            name\n            preview\n          }\n          isActive\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrder($id: ID!) {\n    order(id: $id) {\n      id\n      code\n      state\n      total\n      totalWithTax\n      lines {\n        id\n        quantity\n        linePrice\n        linePriceWithTax\n        productVariant {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrder($id: ID!) {\n    order(id: $id) {\n      id\n      code\n      state\n      total\n      totalWithTax\n      lines {\n        id\n        quantity\n        linePrice\n        linePriceWithTax\n        productVariant {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMlTrainingInfo($channelId: ID!) {\n    mlTrainingInfo(channelId: $channelId) {\n      status\n      progress\n      startedAt\n      error\n      productCount\n      imageCount\n      hasActiveModel\n      lastTrainedAt\n    }\n  }\n"): (typeof documents)["\n  query GetMlTrainingInfo($channelId: ID!) {\n    mlTrainingInfo(channelId: $channelId) {\n      status\n      progress\n      startedAt\n      error\n      productCount\n      imageCount\n      hasActiveModel\n      lastTrainedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMlTrainingManifest($channelId: ID!) {\n    mlTrainingManifest(channelId: $channelId) {\n      channelId\n      version\n      extractedAt\n      products {\n        productId\n        productName\n        images {\n          assetId\n          url\n          filename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMlTrainingManifest($channelId: ID!) {\n    mlTrainingManifest(channelId: $channelId) {\n      channelId\n      version\n      extractedAt\n      products {\n        productId\n        productName\n        images {\n          assetId\n          url\n          filename\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ExtractPhotosForTraining($channelId: ID!) {\n    extractPhotosForTraining(channelId: $channelId)\n  }\n"): (typeof documents)["\n  mutation ExtractPhotosForTraining($channelId: ID!) {\n    extractPhotosForTraining(channelId: $channelId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateTrainingStatus($channelId: ID!, $status: String!, $progress: Int, $error: String) {\n    updateTrainingStatus(channelId: $channelId, status: $status, progress: $progress, error: $error)\n  }\n"): (typeof documents)["\n  mutation UpdateTrainingStatus($channelId: ID!, $status: String!, $progress: Int, $error: String) {\n    updateTrainingStatus(channelId: $channelId, status: $status, progress: $progress, error: $error)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CompleteTraining($channelId: ID!, $modelJson: Upload!, $weightsFile: Upload!, $metadata: Upload!) {\n    completeTraining(channelId: $channelId, modelJson: $modelJson, weightsFile: $weightsFile, metadata: $metadata)\n  }\n"): (typeof documents)["\n  mutation CompleteTraining($channelId: ID!, $modelJson: Upload!, $weightsFile: Upload!, $metadata: Upload!) {\n    completeTraining(channelId: $channelId, modelJson: $modelJson, weightsFile: $weightsFile, metadata: $metadata)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n        user {\n          id\n          identifier\n          verified\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCustomers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n        user {\n          id\n          identifier\n          verified\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomer($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n      user {\n        id\n        identifier\n        verified\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCustomer($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n      user {\n        id\n        identifier\n        verified\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCustomer($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCustomer($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCustomer($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCustomer($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCustomerAddress($customerId: ID!, $input: CreateAddressInput!) {\n    createCustomerAddress(customerId: $customerId, input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCustomerAddress($customerId: ID!, $input: CreateAddressInput!) {\n    createCustomerAddress(customerId: $customerId, input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCustomerAddress($input: UpdateAddressInput!) {\n    updateCustomerAddress(input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomerAddress($input: UpdateAddressInput!) {\n    updateCustomerAddress(input: $input) {\n      id\n      fullName\n      streetLine1\n      streetLine2\n      city\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCustomerAddress($id: ID!) {\n    deleteCustomerAddress(id: $id) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCustomerAddress($id: ID!) {\n    deleteCustomerAddress(id: $id) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSuppliers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSuppliers($options: CustomerListOptions) {\n    customers(options: $options) {\n      totalItems\n      items {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n        addresses {\n          id\n          fullName\n          streetLine1\n          streetLine2\n          city\n          postalCode\n          country {\n            code\n            name\n          }\n          phoneNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSupplier($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSupplier($id: ID!) {\n    customer(id: $id) {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n      createdAt\n      updatedAt\n      customFields {\n        isSupplier\n        supplierType\n        contactPerson\n        taxId\n        paymentTerms\n        notes\n        outstandingAmount\n      }\n      addresses {\n        id\n        fullName\n        streetLine1\n        streetLine2\n        city\n        postalCode\n        country {\n          code\n          name\n        }\n        phoneNumber\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSupplier($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSupplier($input: CreateCustomerInput!) {\n    createCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        createdAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSupplier($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSupplier($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      ... on Customer {\n        id\n        firstName\n        lastName\n        emailAddress\n        phoneNumber\n        updatedAt\n        customFields {\n          isSupplier\n          supplierType\n          contactPerson\n          taxId\n          paymentTerms\n          notes\n          outstandingAmount\n        }\n      }\n      ... on EmailAddressConflictError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteSupplier($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSupplier($id: ID!) {\n    deleteCustomer(id: $id) {\n      result\n      message\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;