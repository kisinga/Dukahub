/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": typeof types.GetActiveAdministratorDocument,
    "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n": typeof types.LogoutDocument,
    "\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": typeof types.UpdateAdministratorDocument,
    "\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n": typeof types.GetUserChannelsDocument,
    "\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      customFields {\n        cashierFlowEnabled\n        mlModelJsonId\n        mlModelBinId\n        mlMetadataId\n      }\n    }\n  }\n": typeof types.GetActiveChannelDocument,
    "\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n": typeof types.GetStockLocationsDocument,
    "\n  query GetStockLocationsWithCashier {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n        customFields {\n          cashierOpen\n        }\n      }\n    }\n  }\n": typeof types.GetStockLocationsWithCashierDocument,
    "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n      }\n    }\n  }\n": typeof types.CreateProductDocument,
    "\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n": typeof types.CreateProductVariantsDocument,
    "\n  mutation UpdateStock($input: [UpdateProductVariantInput!]!) {\n    updateProductVariants(input: $input) {\n      id\n      sku\n      stockOnHand\n      stockAllocated\n      stockLevels {\n        id\n        stockOnHand\n        stockAllocated\n        stockLocation {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.UpdateStockDocument,
    "\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProductDetailDocument,
    "\n  query CheckSKUExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.CheckSkuExistsDocument,
    "\n  query GetProductOptionGroups {\n    productOptionGroups {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n": typeof types.GetProductOptionGroupsDocument,
    "\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n": typeof types.CreateProductOptionGroupDocument,
    "\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n": typeof types.CreateProductOptionDocument,
    "\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n": typeof types.AddOptionGroupToProductDocument,
    "\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n        }\n      }\n    }\n  }\n": typeof types.GetProductsDocument,
    "\n        query GetOrdersForPeriod($startDate: DateTime!) {\n          orders(options: { \n            filter: { \n              orderPlacedAt: { after: $startDate }\n            }\n            take: 1000\n          }) {\n            items {\n              id\n              total\n              totalWithTax\n              orderPlacedAt\n              state\n            }\n          }\n        }\n      ": typeof types.GetOrdersForPeriodDocument,
    "\n        query GetProductStats {\n          products(options: { take: 1 }) {\n            totalItems\n          }\n          productVariants(options: { take: 1 }) {\n            totalItems\n          }\n        }\n      ": typeof types.GetProductStatsDocument,
    "\n        query GetRecentOrders {\n          orders(options: { take: 10, sort: { createdAt: DESC } }) {\n            items {\n              id\n              code\n              total\n              totalWithTax\n              state\n              createdAt\n              currencyCode\n              lines {\n                id\n                productVariant {\n                  name\n                }\n                quantity\n              }\n            }\n          }\n        }\n      ": typeof types.GetRecentOrdersDocument,
    "\n                query GetMLModelAssets($ids: [String!]!) {\n                    assets(options: { filter: { id: { in: $ids } } }) {\n                        items {\n                            id\n                            source\n                        }\n                    }\n                }\n            ": typeof types.GetMlModelAssetsDocument,
    "\n      query PrefetchProducts($take: Int!) {\n        products(options: { take: $take, skip: 0 }) {\n          totalItems\n          items {\n            id\n            name\n            featuredAsset {\n              preview\n            }\n            variants {\n              id\n              name\n              sku\n              price\n              priceWithTax\n              stockOnHand\n            }\n          }\n        }\n      }\n    ": typeof types.PrefetchProductsDocument,
    "\n            query SearchProducts($term: String!) {\n                products(options: { \n                    filter: { \n                        name: { contains: $term }\n                    },\n                    take: 5 \n                }) {\n                    items {\n                        id\n                        name\n                        featuredAsset {\n                            preview\n                        }\n                        variants {\n                            id\n                            name\n                            sku\n                            price\n                            priceWithTax\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        ": typeof types.SearchProductsDocument,
    "\n            query GetProduct($id: ID!) {\n                product(id: $id) {\n                    id\n                    name\n                    featuredAsset {\n                        preview\n                    }\n                    variants {\n                        id\n                        name\n                        sku\n                        price\n                        priceWithTax\n                        stockLevels {\n                            stockLocationId\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        ": typeof types.GetProductDocument,
    "\n            query SearchByBarcode($sku: String!) {\n                search(input: { term: $sku, take: 1 }) {\n                    items {\n                        productId\n                        productName\n                        productVariantId\n                        productVariantName\n                        sku\n                        price {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        priceWithTax {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        productAsset {\n                            preview\n                        }\n                    }\n                }\n            }\n        ": typeof types.SearchByBarcodeDocument,
};
const documents: Documents = {
    "\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": types.GetActiveAdministratorDocument,
    "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n": types.LogoutDocument,
    "\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n": types.UpdateAdministratorDocument,
    "\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n": types.GetUserChannelsDocument,
    "\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      customFields {\n        cashierFlowEnabled\n        mlModelJsonId\n        mlModelBinId\n        mlMetadataId\n      }\n    }\n  }\n": types.GetActiveChannelDocument,
    "\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n": types.GetStockLocationsDocument,
    "\n  query GetStockLocationsWithCashier {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n        customFields {\n          cashierOpen\n        }\n      }\n    }\n  }\n": types.GetStockLocationsWithCashierDocument,
    "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n      }\n    }\n  }\n": types.CreateProductDocument,
    "\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n": types.CreateProductVariantsDocument,
    "\n  mutation UpdateStock($input: [UpdateProductVariantInput!]!) {\n    updateProductVariants(input: $input) {\n      id\n      sku\n      stockOnHand\n      stockAllocated\n      stockLevels {\n        id\n        stockOnHand\n        stockAllocated\n        stockLocation {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.UpdateStockDocument,
    "\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetProductDetailDocument,
    "\n  query CheckSKUExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CheckSkuExistsDocument,
    "\n  query GetProductOptionGroups {\n    productOptionGroups {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n": types.GetProductOptionGroupsDocument,
    "\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n": types.CreateProductOptionGroupDocument,
    "\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n": types.CreateProductOptionDocument,
    "\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n": types.AddOptionGroupToProductDocument,
    "\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n        }\n      }\n    }\n  }\n": types.GetProductsDocument,
    "\n        query GetOrdersForPeriod($startDate: DateTime!) {\n          orders(options: { \n            filter: { \n              orderPlacedAt: { after: $startDate }\n            }\n            take: 1000\n          }) {\n            items {\n              id\n              total\n              totalWithTax\n              orderPlacedAt\n              state\n            }\n          }\n        }\n      ": types.GetOrdersForPeriodDocument,
    "\n        query GetProductStats {\n          products(options: { take: 1 }) {\n            totalItems\n          }\n          productVariants(options: { take: 1 }) {\n            totalItems\n          }\n        }\n      ": types.GetProductStatsDocument,
    "\n        query GetRecentOrders {\n          orders(options: { take: 10, sort: { createdAt: DESC } }) {\n            items {\n              id\n              code\n              total\n              totalWithTax\n              state\n              createdAt\n              currencyCode\n              lines {\n                id\n                productVariant {\n                  name\n                }\n                quantity\n              }\n            }\n          }\n        }\n      ": types.GetRecentOrdersDocument,
    "\n                query GetMLModelAssets($ids: [String!]!) {\n                    assets(options: { filter: { id: { in: $ids } } }) {\n                        items {\n                            id\n                            source\n                        }\n                    }\n                }\n            ": types.GetMlModelAssetsDocument,
    "\n      query PrefetchProducts($take: Int!) {\n        products(options: { take: $take, skip: 0 }) {\n          totalItems\n          items {\n            id\n            name\n            featuredAsset {\n              preview\n            }\n            variants {\n              id\n              name\n              sku\n              price\n              priceWithTax\n              stockOnHand\n            }\n          }\n        }\n      }\n    ": types.PrefetchProductsDocument,
    "\n            query SearchProducts($term: String!) {\n                products(options: { \n                    filter: { \n                        name: { contains: $term }\n                    },\n                    take: 5 \n                }) {\n                    items {\n                        id\n                        name\n                        featuredAsset {\n                            preview\n                        }\n                        variants {\n                            id\n                            name\n                            sku\n                            price\n                            priceWithTax\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        ": types.SearchProductsDocument,
    "\n            query GetProduct($id: ID!) {\n                product(id: $id) {\n                    id\n                    name\n                    featuredAsset {\n                        preview\n                    }\n                    variants {\n                        id\n                        name\n                        sku\n                        price\n                        priceWithTax\n                        stockLevels {\n                            stockLocationId\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        ": types.GetProductDocument,
    "\n            query SearchByBarcode($sku: String!) {\n                search(input: { term: $sku, take: 1 }) {\n                    items {\n                        productId\n                        productName\n                        productVariantId\n                        productVariantName\n                        sku\n                        price {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        priceWithTax {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        productAsset {\n                            preview\n                        }\n                    }\n                }\n            }\n        ": types.SearchByBarcodeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"): (typeof documents)["\n  query GetActiveAdministrator {\n    activeAdministrator {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          code\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAdministrator($input: UpdateActiveAdministratorInput!) {\n    updateActiveAdministrator(input: $input) {\n      id\n      firstName\n      lastName\n      emailAddress\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserChannels {\n    me {\n      id\n      identifier\n      channels {\n        id\n        code\n        token\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      customFields {\n        cashierFlowEnabled\n        mlModelJsonId\n        mlModelBinId\n        mlMetadataId\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetActiveChannel {\n    activeChannel {\n      id\n      code\n      token\n      customFields {\n        cashierFlowEnabled\n        mlModelJsonId\n        mlModelBinId\n        mlMetadataId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStockLocations {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetStockLocationsWithCashier {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n        customFields {\n          cashierOpen\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStockLocationsWithCashier {\n    stockLocations(options: { take: 100 }) {\n      items {\n        id\n        name\n        description\n        customFields {\n          cashierOpen\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductVariants($input: [CreateProductVariantInput!]!) {\n    createProductVariants(input: $input) {\n      id\n      name\n      sku\n      price\n      priceWithTax\n      stockOnHand\n      product {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateStock($input: [UpdateProductVariantInput!]!) {\n    updateProductVariants(input: $input) {\n      id\n      sku\n      stockOnHand\n      stockAllocated\n      stockLevels {\n        id\n        stockOnHand\n        stockAllocated\n        stockLocation {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStock($input: [UpdateProductVariantInput!]!) {\n    updateProductVariants(input: $input) {\n      id\n      sku\n      stockOnHand\n      stockAllocated\n      stockLevels {\n        id\n        stockOnHand\n        stockAllocated\n        stockLocation {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductDetail($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n      description\n      enabled\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        sku\n        price\n        priceWithTax\n        stockOnHand\n        stockLevels {\n          id\n          stockOnHand\n          stockLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckSKUExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CheckSKUExists($sku: String!) {\n    productVariants(options: { filter: { sku: { eq: $sku } }, take: 1 }) {\n      items {\n        id\n        sku\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductOptionGroups {\n    productOptionGroups {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductOptionGroups {\n    productOptionGroups {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductOptionGroup($input: CreateProductOptionGroupInput!) {\n    createProductOptionGroup(input: $input) {\n      id\n      code\n      name\n      options {\n        id\n        code\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductOption($input: CreateProductOptionInput!) {\n    createProductOption(input: $input) {\n      id\n      code\n      name\n      group {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddOptionGroupToProduct($productId: ID!, $optionGroupId: ID!) {\n    addOptionGroupToProduct(productId: $productId, optionGroupId: $optionGroupId) {\n      id\n      name\n      optionGroups {\n        id\n        code\n        name\n        options {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProducts($options: ProductListOptions) {\n    products(options: $options) {\n      totalItems\n      items {\n        id\n        name\n        slug\n        description\n        enabled\n        featuredAsset {\n          id\n          preview\n        }\n        variants {\n          id\n          name\n          sku\n          price\n          priceWithTax\n          stockOnHand\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query GetOrdersForPeriod($startDate: DateTime!) {\n          orders(options: { \n            filter: { \n              orderPlacedAt: { after: $startDate }\n            }\n            take: 1000\n          }) {\n            items {\n              id\n              total\n              totalWithTax\n              orderPlacedAt\n              state\n            }\n          }\n        }\n      "): (typeof documents)["\n        query GetOrdersForPeriod($startDate: DateTime!) {\n          orders(options: { \n            filter: { \n              orderPlacedAt: { after: $startDate }\n            }\n            take: 1000\n          }) {\n            items {\n              id\n              total\n              totalWithTax\n              orderPlacedAt\n              state\n            }\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query GetProductStats {\n          products(options: { take: 1 }) {\n            totalItems\n          }\n          productVariants(options: { take: 1 }) {\n            totalItems\n          }\n        }\n      "): (typeof documents)["\n        query GetProductStats {\n          products(options: { take: 1 }) {\n            totalItems\n          }\n          productVariants(options: { take: 1 }) {\n            totalItems\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query GetRecentOrders {\n          orders(options: { take: 10, sort: { createdAt: DESC } }) {\n            items {\n              id\n              code\n              total\n              totalWithTax\n              state\n              createdAt\n              currencyCode\n              lines {\n                id\n                productVariant {\n                  name\n                }\n                quantity\n              }\n            }\n          }\n        }\n      "): (typeof documents)["\n        query GetRecentOrders {\n          orders(options: { take: 10, sort: { createdAt: DESC } }) {\n            items {\n              id\n              code\n              total\n              totalWithTax\n              state\n              createdAt\n              currencyCode\n              lines {\n                id\n                productVariant {\n                  name\n                }\n                quantity\n              }\n            }\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                query GetMLModelAssets($ids: [String!]!) {\n                    assets(options: { filter: { id: { in: $ids } } }) {\n                        items {\n                            id\n                            source\n                        }\n                    }\n                }\n            "): (typeof documents)["\n                query GetMLModelAssets($ids: [String!]!) {\n                    assets(options: { filter: { id: { in: $ids } } }) {\n                        items {\n                            id\n                            source\n                        }\n                    }\n                }\n            "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query PrefetchProducts($take: Int!) {\n        products(options: { take: $take, skip: 0 }) {\n          totalItems\n          items {\n            id\n            name\n            featuredAsset {\n              preview\n            }\n            variants {\n              id\n              name\n              sku\n              price\n              priceWithTax\n              stockOnHand\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query PrefetchProducts($take: Int!) {\n        products(options: { take: $take, skip: 0 }) {\n          totalItems\n          items {\n            id\n            name\n            featuredAsset {\n              preview\n            }\n            variants {\n              id\n              name\n              sku\n              price\n              priceWithTax\n              stockOnHand\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            query SearchProducts($term: String!) {\n                products(options: { \n                    filter: { \n                        name: { contains: $term }\n                    },\n                    take: 5 \n                }) {\n                    items {\n                        id\n                        name\n                        featuredAsset {\n                            preview\n                        }\n                        variants {\n                            id\n                            name\n                            sku\n                            price\n                            priceWithTax\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        "): (typeof documents)["\n            query SearchProducts($term: String!) {\n                products(options: { \n                    filter: { \n                        name: { contains: $term }\n                    },\n                    take: 5 \n                }) {\n                    items {\n                        id\n                        name\n                        featuredAsset {\n                            preview\n                        }\n                        variants {\n                            id\n                            name\n                            sku\n                            price\n                            priceWithTax\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            query GetProduct($id: ID!) {\n                product(id: $id) {\n                    id\n                    name\n                    featuredAsset {\n                        preview\n                    }\n                    variants {\n                        id\n                        name\n                        sku\n                        price\n                        priceWithTax\n                        stockLevels {\n                            stockLocationId\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        "): (typeof documents)["\n            query GetProduct($id: ID!) {\n                product(id: $id) {\n                    id\n                    name\n                    featuredAsset {\n                        preview\n                    }\n                    variants {\n                        id\n                        name\n                        sku\n                        price\n                        priceWithTax\n                        stockLevels {\n                            stockLocationId\n                            stockOnHand\n                        }\n                    }\n                }\n            }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            query SearchByBarcode($sku: String!) {\n                search(input: { term: $sku, take: 1 }) {\n                    items {\n                        productId\n                        productName\n                        productVariantId\n                        productVariantName\n                        sku\n                        price {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        priceWithTax {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        productAsset {\n                            preview\n                        }\n                    }\n                }\n            }\n        "): (typeof documents)["\n            query SearchByBarcode($sku: String!) {\n                search(input: { term: $sku, take: 1 }) {\n                    items {\n                        productId\n                        productName\n                        productVariantId\n                        productVariantName\n                        sku\n                        price {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        priceWithTax {\n                            ... on SinglePrice {\n                                value\n                            }\n                        }\n                        productAsset {\n                            preview\n                        }\n                    }\n                }\n            }\n        "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;