package dashboard

import (
	"github.com/kisinga/dukahub/models"
	"github.com/kisinga/dukahub/views/layouts"
)

var config = models.LayoutConfig{
	Title: "Dashboard",
	JS:    nil,
	CSS: templ.Raw(`
  <link rel="stylesheet" href="/public/styles/dashboard-layout.css"/>
  <link rel="stylesheet" href="/public/styles/dashboard-stats.css"/>
  `),
}

templ Home(data *models.DashboardData) {
	@layouts.BaseLayout(config) {
		@layouts.DashboardLayout(data.User, data.Activecompany) {
			<div class="stats-container">
				<!-- Category Pills - Now more compact -->
				<div class="stats-grid" style="margin-top: 0.75rem">
					<div class="category-pill purchases-pill">Purchases</div>
					<div class="category-pill sales-pill">Sales</div>
					<div class="category-pill expenses-pill">Expenses</div>
				</div>
				<!-- Today Stats - The one row we're focusing on -->
				<div class="stats-grid">
					<div class="stats-card purchases" data-category="purchases" data-period="today">
						<div class="stat-amount">3,482</div>
						<br/>
						<div class="stat-period">Today</div>
						<!-- NEW: Caret indicator -->
						<div class="caret-indicator">
							<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
								<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"></path>
							</svg>
						</div>
					</div>
					<div class="stats-card sales" data-category="sales" data-period="today">
						<div class="stat-amount">5,392</div>
						<br/>
						<div class="stat-period">Today</div>
						<!-- NEW: Caret indicator -->
						<div class="caret-indicator">
							<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
								<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"></path>
							</svg>
						</div>
					</div>
					<div class="stats-card expenses" data-category="expenses" data-period="today">
						<div class="stat-amount">1,843</div>
						<br/>
						<div class="stat-period">Today</div>
						<!-- NEW: Caret indicator -->
						<div class="caret-indicator">
							<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
								<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"></path>
							</svg>
						</div>
					</div>
				</div>
				<!-- Account Details Panel (Hidden by default) -->
				<div id="accountDetailsContainer" class="account-details-container">
					<div id="accountDetails" class="account-details">
						<div class="account-details-header">
							<h4 id="accountDetailsTitle" class="account-details-title">Account Breakdown</h4>
							<button id="closeDetails" class="close-details">
								<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
									<path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path>
								</svg>
							</button>
						</div>
						<div id="accountItems" class="account-items">
							<!-- Will be populated dynamically -->
						</div>
					</div>
				</div>
				<!-- Quick Actions Toolbar - Now more compact for mobile -->
				<div class="action-buttons">
					<button class="action-button customers">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
							<path d="M7 14s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1H7Zm4-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"></path>
							<path d="M5 3a3 3 0 1 0 0 6 3 3 0 0 0 0-6ZM2.5 8C1.1 8 0 9.1 0 10.5c0 1.4 1.1 2.5 2.5 2.5.9 0 1.7-.5 2.1-1.2"></path>
						</svg>
						Users
					</button>
					<button class="action-button new-sale">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
							<path d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l1.25 5h8.22l1.25-5H3.14zM5 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm7 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"></path>
						</svg>
						Sale
					</button>
					<button class="action-button inventory">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
							<path d="M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5l2.404.961L10.404 2l-2.218-.887zm3.564 1.426L5.596 5 8 5.961 14.154 3.5l-2.404-.961zm3.25 1.7-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923l6.5 2.6z"></path>
						</svg>
						Stock
					</button>
					<button class="action-button reports">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
							<path d="M0 0h1v15h15v1H0V0Zm10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4.9l-3.613 4.417a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61L13.445 4H10.5a.5.5 0 0 1-.5-.5Z"></path>
						</svg>
						Stats
					</button>
				</div>
			</div>
			<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statsCards = document.querySelectorAll('.stats-card');
    const accountDetailsContainer = document.getElementById('accountDetailsContainer');
    const accountDetailsTitle = document.getElementById('accountDetailsTitle');
    const accountItems = document.getElementById('accountItems');
    const closeDetailsBtn = document.getElementById('closeDetails');
    const accountDetails = document.getElementById('accountDetails');
    
    let activeCard = null;
    
    // Account data templates - Simplified for mobile
    const accountData = {
      purchases: {
        today: [
          { name: 'MPESA', value: '$1,200', icon: 'phone' },
          { name: 'CASH', value: '$782', icon: 'cash' },
          { name: 'BANK', value: '$1,500', icon: 'bank' }
        ]
      },
      sales: {
        today: [
          { name: 'MPESA', value: '$2,200', icon: 'phone' },
          { name: 'CASH', value: '$1,300', icon: 'cash' },
          { name: 'BANK', value: '$1,892', icon: 'bank' }
        ]
      },
      expenses: {
        today: [
          { name: 'MPESA', value: '$684', icon: 'phone' },
          { name: 'CASH', value: '$559', icon: 'cash' },
          { name: 'BANK', value: '$600', icon: 'bank' }
        ]
      }
    };
    
    // Icons for account types - Simplified for mobile
    const icons = {
      phone: `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
        <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"/>
        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
      </svg>`,
      cash: `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
        <path d="M1 3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1H1zm7 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"/>
        <path d="M0 5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V5z"/>
      </svg>`,
      bank: `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 0 0 3h16L8 0zm0 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM2 6.5h1v7H2v-7zm11 0h1v7h-1v-7z"/>
        <path d="M1 9h14v4H1V9z"/>
      </svg>`
    };
    
    // Function to update account details - Mobile optimized
    function updateAccountDetails(category, period) {
      // Set title with proper case
      const formattedCategory = category.charAt(0).toUpperCase() + category.slice(1);
      
      accountDetailsTitle.textContent = `${formattedCategory} Accounts`;
      accountDetailsTitle.className = `account-details-title ${category}`;
      
      // Update content
      const items = accountData[category][period];
      accountItems.innerHTML = '';
      
      // NEW: Update the account details class to match the category for the border color
      accountDetails.className = `account-details ${category}`;
      
      items.forEach(item => {
        const div = document.createElement('div');
        div.className = 'account-item';
        div.innerHTML = `
          <div class="account-icon">
            ${icons[item.icon]}
            ${item.name}
          </div>
          <div class="account-value ${category === 'purchases' ? 'text-primary' : 
                                  category === 'sales' ? 'text-success' : 'text-danger'}">
            ${item.value}
          </div>
        `;
        accountItems.appendChild(div);
      });
    }
    
    // Handle clicking on stats cards - Mobile optimized with better touch handling
    statsCards.forEach(card => {
      card.addEventListener('click', function(e) {
        e.preventDefault();
        
        const category = this.dataset.category;
        const period = this.dataset.period;
        
        // Remove active class from previous card
        if (activeCard) {
          activeCard.classList.remove('active');
        }
        
        // If clicking the same card, toggle details
        if (activeCard === this && accountDetailsContainer.classList.contains('show')) {
          accountDetailsContainer.classList.remove('show');
          this.classList.remove('active');
          activeCard = null;
          return;
        }
        
        // Add active class to current card
        this.classList.add('active');
        activeCard = this;
        
        // Update and show account details
        updateAccountDetails(category, period);
        
        // Position the details container right after this card's row
        const cardRow = this.closest('.stats-grid');
        if (cardRow.nextElementSibling === accountDetailsContainer) {
          // If already in the right place, just show it
          accountDetailsContainer.classList.add('show');
        } else {
          // Move it to the right place and show it
          accountDetailsContainer.classList.remove('show');
          cardRow.after(accountDetailsContainer);
          
          // Force browser reflow to ensure the animation works properly
          void accountDetailsContainer.offsetWidth;
          
          accountDetailsContainer.classList.add('show');
        }
        
        // Calculate which column the active card is in (1, 2, or 3)
        const cardIndex = Array.from(cardRow.children).indexOf(this);
        
        // NEW: Position the card's ribbon connector accurately 
        // This matches the expanding panel with the correct card
        this.style.setProperty('--card-index', cardIndex);
        
        // Scroll to make sure the details are visible - smoother on mobile
        setTimeout(() => {
          accountDetailsContainer.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'nearest',
            inline: 'nearest'
          });
        }, 100);
      });
    });
    
    // Close details button
    closeDetailsBtn.addEventListener('click', function() {
      accountDetailsContainer.classList.remove('show');
      if (activeCard) {
        activeCard.classList.remove('active');
        activeCard = null;
      }
    });
  });
</script>
		}
	}
}
