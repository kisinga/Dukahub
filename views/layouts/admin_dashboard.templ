package layouts

import (
	"github.com/kisinga/dukahub/models"
	"github.com/kisinga/dukahub/views/components"
)

templ AdminDashboard(admin *models.Admins) {
	<div class="admin-dashboard-wrapper">
		<!-- Sidebar -->
		<div class="sidebar" id="sidebar">
			<div class="sidebar-logo">
				<h4 class="m-0 text-primary">Dashboard</h4>
				<img
					src="/public/assets/favicon.svg"
					alt="Logo"
					class="ms-auto"
					style="width: 40px; height: 40px; "
				/>
			</div>
			<div class="sidebar-nav">
				<ul class="nav flex-column">
					<li class="nav-item">
						<a href="/admin-dashboard" class="nav-link active">
							<i class="bi bi-house-door"></i> Dashboard
						</a>
					</li>
					<li class="nav-item">
						<a href="/admin-dashboard/analytics" class="nav-link">
							<i class="bi bi-bar-chart"></i> Analytics
						</a>
					</li>
					<li class="nav-item">
						<a href="#" class="nav-link">
							<i class="bi bi-people"></i> Users
						</a>
					</li>
					<li class="nav-item">
						<a href="#" class="nav-link">
							<i class="bi bi-gear"></i> Settings
						</a>
					</li>
					<li class="nav-item">
						<a href="#" class="nav-link">
							<i class="bi bi-question-circle"></i> Help
						</a>
					</li>
				</ul>
			</div>
		</div>
		<!-- Main Content -->
		<div class="main-content">
			<!-- Top Navigation Bar -->
			<div class="topbar">
				<button
					class="btn d-none sidebar-toggle me-3"
					id="sidebarToggle"
					type="button"
				>
					<i class="bi bi-list"></i>
				</button>
				<div class="d-flex align-items-center ms-auto">
					<!-- Notifications -->
					<div class="dropdown me-3">
						<a
							class="btn btn-light position-relative"
							href="#"
							role="button"
							id="notificationDropdown"
							data-bs-toggle="dropdown"
							aria-expanded="false"
						>
							<i class="bi bi-bell"></i>
							<span
								class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger  "
							>
								3
							</span>
						</a>
						<ul
							class="dropdown-menu dropdown-menu-end"
							aria-labelledby="notificationDropdown"
						>
							<li><h6 class="dropdown-header">Notifications</h6></li>
							<li>
								<a class="dropdown-item" href="#">
									<div class="d-flex align-items-center">
										<div class="flex-shrink-0">
											<i class="bi bi-info-circle text-primary"></i>
										</div>
										<div class="flex-grow-1 ms-2">
											<p class="mb-0">New update available</p>
											<small class="text-muted">2 hours ago</small>
										</div>
									</div>
								</a>
							</li>
							<li>
								<a class="dropdown-item" href="#">
									<div class="d-flex align-items-center">
										<div class="flex-shrink-0">
											<i class="bi bi-check-circle text-success"></i>
										</div>
										<div class="flex-grow-1 ms-2">
											<p class="mb-0">Task completed</p>
											<small class="text-muted">4 hours ago</small>
										</div>
									</div>
								</a>
							</li>
							<li>
								<a class="dropdown-item" href="#">
									<div class="d-flex align-items-center">
										<div class="flex-shrink-0">
											<i class="bi bi-exclamation-circle text-warning"></i>
										</div>
										<div class="flex-grow-1 ms-2">
											<p class="mb-0">System alert</p>
											<small class="text-muted">1 day ago</small>
										</div>
									</div>
								</a>
							</li>
							<li><hr class="dropdown-divider"/></li>
							<li>
								<a class="dropdown-item text-center" href="#">View all</a>
							</li>
						</ul>
					</div>
					<!-- Messages -->
					<div class="dropdown me-3">
						<a
							class="btn btn-light position-relative"
							href="#"
							role="button"
							id="messageDropdown"
							data-bs-toggle="dropdown"
							aria-expanded="false"
						>
							<i class="bi bi-chat"></i>
							<span
								class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary  "
							>
								5
							</span>
						</a>
						<ul
							class="dropdown-menu dropdown-menu-end"
							aria-labelledby="messageDropdown"
						>
							<li><h6 class="dropdown-header">Messages</h6></li>
							<li>
								<a class="dropdown-item" href="#">
									<div class="d-flex align-items-center">
										<div class="flex-shrink-0">
											<img
												src="https://via.placeholder.com/40"
												alt="User"
												class="profile-pic"
											/>
										</div>
										<div class="flex-grow-1 ms-2">
											<p class="mb-0">John Doe</p>
											<small class="text-muted">Hello, how are you?</small>
										</div>
									</div>
								</a>
							</li>
							<li>
								<a class="dropdown-item" href="#">
									<div class="d-flex align-items-center">
										<div class="flex-shrink-0">
											<img
												src="https://via.placeholder.com/40"
												alt="User"
												class="profile-pic"
											/>
										</div>
										<div class="flex-grow-1 ms-2">
											<p class="mb-0">Jane Smith</p>
											<small class="text-muted">Meeting at 3 PM</small>
										</div>
									</div>
								</a>
							</li>
							<li><hr class="dropdown-divider"/></li>
							<li>
								<a class="dropdown-item text-center" href="#">View all</a>
							</li>
						</ul>
					</div>
					<!-- Profile -->
					@components.UserProfile(admin.Avatar(), admin.Email())
				</div>
			</div>
			<!-- Content Area -->
			<main class="flex-grow-1 overflow-auto p-4">
				{ children... }
			</main>
		</div>
		<!-- Custom JS -->
		<script>
      document.addEventListener("DOMContentLoaded", function () {
        // Toggle sidebar on mobile
        const sidebarToggle = document.getElementById("sidebarToggle");
        const sidebar = document.getElementById("sidebar");

        if (sidebarToggle) {
          sidebarToggle.addEventListener("click", function () {
            sidebar.classList.toggle("show");
          });
        }

        // Close sidebar when clicking outside on mobile
        document.addEventListener("click", function (event) {
          const isClickInsideSidebar = sidebar.contains(event.target);
          const isClickOnToggle = sidebarToggle.contains(event.target);
          
          if (
            window.innerWidth < 992 &&
            !isClickInsideSidebar &&
            !isClickOnToggle &&
            sidebar.classList.contains("show")
          ) {
            sidebar.classList.remove("show");
          }
        });

        // Handle window resize
        window.addEventListener("resize", function () {
          if (window.innerWidth >= 992) {
            sidebar.classList.remove("show");
          }
        });

        // Highlight active navigation link
        const navLinks = document.querySelectorAll(".sidebar-nav .nav-link");
        const currentPath = window.location.pathname;

        navLinks.forEach(link => {
          if (link.getAttribute("href") === currentPath) {
            // Remove active class from previously active link, if any
            const currentActive = document.querySelector(".sidebar-nav .nav-link.active");
            if (currentActive) {
              currentActive.classList.remove("active");
            }
            link.classList.add("active");
          }
        });

        // Model Details Modal
        const modelModal = document.getElementById("modelModal");
        if (modelModal) {
          modelModal.addEventListener("show.bs.modal", function (event) {
            const button = event.relatedTarget; // Button that triggered the modal
            document.getElementById("modelCompanyName").textContent = button.getAttribute("data-company");
            document.getElementById("modelCompanyId").textContent = button.getAttribute("data-company-id");
            document.getElementById("modelStatus").textContent = button.getAttribute("data-status");
            document.getElementById("modelTrainDate").textContent = button.getAttribute("data-train-date");
            document.getElementById("modelNewItems").textContent = button.getAttribute("data-new-items");
            document.getElementById("modelNewImages").textContent = button.getAttribute("data-new-images");
            document.getElementById("modelTotalImages").textContent = button.getAttribute("data-total-images");
          });
        }

        // Delete Company Modal
        const deleteCompanyModal = document.getElementById("deleteCompanyModal");
        if (deleteCompanyModal) {
          deleteCompanyModal.addEventListener("show.bs.modal", function (event) {
            const button = event.relatedTarget; // Button that triggered the modal
            document.getElementById("companyNameToDelete").textContent = button.getAttribute("data-company-name");
            document.getElementById("deleteCompanyId").value = button.getAttribute("data-company-id");
          });
        }

        // Pagination handler
        document.querySelectorAll(".pagination .page-link").forEach(link => {
          link.addEventListener("click", function(event) {
            event.preventDefault();
            const page = this.getAttribute("data-page");
            // In a real application, you would make an AJAX request here
            // to fetch data for the new page and re-render the table.
            console.log("Navigate to page:", page);
            // For now, we'll just update the URL hash to simulate navigation
            window.location.hash = "page-" + page;
          });
        });
      });
    </script>
	</div>
}
