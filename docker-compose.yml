# =====================================
# Dukahub Base Configuration (Shared)
# =====================================
#
# This base config is used by both dev and production.
# Environment-specific overrides:
#   - Dev: docker-compose.override.yml (auto-loaded)
#   - Prod: docker-compose.prod.yml (use -f flag)
#
# Usage:
#   Dev:  ./compose-dev.sh up -d
#   Prod: docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  postgres_db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    labels:
      - "io.vendure.create.name=dukahub"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - dukahub_network

  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis_data:/data
    labels:
      - "io.vendure.create.name=dukahub"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - dukahub_network

  backend:
    environment:
      DOCKER_CONTAINER: "true"
      APP_ENV: ${APP_ENV:-dev}
      PORT: ${PORT:-3000}
      DB_HOST: ${DB_HOST:-postgres_db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME}
      DB_SCHEMA: ${DB_SCHEMA:-public}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      SUPERADMIN_USERNAME: ${SUPERADMIN_USERNAME}
      SUPERADMIN_PASSWORD: ${SUPERADMIN_PASSWORD}
      COOKIE_SECRET: ${COOKIE_SECRET}
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      RUN_POPULATE: ${RUN_POPULATE:-false}
      NODE_ENV: ${APP_ENV:-dev}
      NODE_OPTIONS: "--max-old-space-size=2048"
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "io.vendure.create.name=dukahub"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    stop_grace_period: 30s
    networks:
      - dukahub_network

  frontend:
    environment:
      DOCKER_CONTAINER: "true"
    depends_on:
      backend:
        condition: service_healthy
    labels:
      - "io.vendure.create.name=dukahub"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4200/health",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    stop_grace_period: 10s
    networks:
      - dukahub_network

networks:
  dukahub_network:
    driver: bridge

volumes:
  postgres_db_data:
    driver: local
    labels:
      - "io.vendure.create.name=dukahub"
  redis_data:
    driver: local
    labels:
      - "io.vendure.create.name=dukahub"
