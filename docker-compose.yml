# =====================================
# Dukahub Production Docker Compose
# =====================================
#
#
# Usage:
#   docker compose up -d
#   docker compose logs -f
#   docker compose down

version: "3.8"

services:
  # ========================================
  # Database Service
  # ========================================
  postgres_db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-vendure}
      POSTGRES_USER: ${DB_USER:-vendure}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vendure}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-vendure} -d ${DB_NAME:-vendure}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ========================================
  # Redis Cache Service
  # ========================================
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # ========================================
  # Backend Service (Vendure)
  # ========================================
  backend:
    image: ghcr.io/kisinga/dukahub/backend:latest
    restart: unless-stopped
    environment:
      # Database configuration
      DB_HOST: postgres_db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-vendure}
      DB_USERNAME: ${DB_USER:-vendure}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SCHEMA: ${DB_SCHEMA:-public}

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Application configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000

      # Admin credentials
      SUPERADMIN_USERNAME: ${SUPERADMIN_USERNAME}
      SUPERADMIN_PASSWORD: ${SUPERADMIN_PASSWORD}

      # Security
      COOKIE_SECRET: ${COOKIE_SECRET}
      COOKIE_SECURE: ${COOKIE_SECURE:-false}

      # CORS configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:4200}

      # Asset storage
      ASSET_STORAGE_STRATEGY: ${ASSET_STORAGE_STRATEGY:-LocalAssetStorageStrategy}
      ASSET_UPLOAD_DIR: ${ASSET_UPLOAD_DIR:-/app/static/assets}
      ASSET_URL_PREFIX: ${ASSET_URL_PREFIX:-}

      # Email configuration (optional)
      MAIL_TRANSPORT: ${MAIL_TRANSPORT:-SMTP}
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SMTP_FROM: ${SMTP_FROM:-}

      # First run initialization flag
      FIRST_RUN: ${FIRST_RUN:-false}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - backend_assets:/app/static/assets
      - backend_uploads:/app/static/uploads
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ========================================
  # Frontend Service (Angular + Nginx)
  # ========================================
  frontend:
    image: ghcr.io/kisinga/dukahub/frontend:latest
    restart: unless-stopped
    environment:
      # Backend connection - using service name for reliable discovery
      BACKEND_HOST: backend
      BACKEND_PORT: ${BACKEND_PORT:-3000}

      # Additional frontend configuration
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:4200/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# ========================================
# Volumes
# ========================================
volumes:
  postgres_data:
    driver: local

  redis_data:
    driver: local

  backend_assets:
    driver: local

  backend_uploads:
    driver: local
