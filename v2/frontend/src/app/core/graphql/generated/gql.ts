/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetActiveCustomer {\n    activeCustomer {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n": typeof types.GetActiveCustomerDocument,
    "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n": typeof types.LogoutDocument,
    "\n  mutation RegisterCustomer($input: RegisterCustomerInput!) {\n    registerCustomerAccount(input: $input) {\n      ... on Success {\n        success\n      }\n      ... on MissingPasswordError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.RegisterCustomerDocument,
    "\n  mutation RequestPasswordReset($emailAddress: String!) {\n    requestPasswordReset(emailAddress: $emailAddress) {\n      ... on Success {\n        success\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.RequestPasswordResetDocument,
    "\n  mutation ResetPassword($token: String!, $password: String!) {\n    resetPassword(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on PasswordResetTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on PasswordResetTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.ResetPasswordDocument,
    "\n  mutation VerifyCustomerAccount($token: String!, $password: String) {\n    verifyCustomerAccount(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on VerificationTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on VerificationTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on PasswordAlreadySetError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.VerifyCustomerAccountDocument,
    "\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n": typeof types.UpdateCustomerDocument,
    "\n  mutation UpdateCustomerPassword($currentPassword: String!, $newPassword: String!) {\n    updateCustomerPassword(currentPassword: $currentPassword, newPassword: $newPassword) {\n      ... on Success {\n        success\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.UpdateCustomerPasswordDocument,
    "\n  query GetActiveOrder {\n    activeOrder {\n      id\n      code\n      state\n      totalQuantity\n      subTotal\n      shipping\n      total\n      lines {\n        id\n        quantity\n        unitPrice\n        linePrice\n        productVariant {\n          id\n          name\n          product {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetActiveOrderDocument,
    "\n  mutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {\n    addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n      ... on Order {\n        id\n        code\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.AddItemToOrderDocument,
    "\n  mutation RemoveOrderLine($orderLineId: ID!) {\n    removeOrderLine(orderLineId: $orderLineId) {\n      ... on Order {\n        id\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n": typeof types.RemoveOrderLineDocument,
};
const documents: Documents = {
    "\n  query GetActiveCustomer {\n    activeCustomer {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n": types.GetActiveCustomerDocument,
    "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n": types.LogoutDocument,
    "\n  mutation RegisterCustomer($input: RegisterCustomerInput!) {\n    registerCustomerAccount(input: $input) {\n      ... on Success {\n        success\n      }\n      ... on MissingPasswordError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.RegisterCustomerDocument,
    "\n  mutation RequestPasswordReset($emailAddress: String!) {\n    requestPasswordReset(emailAddress: $emailAddress) {\n      ... on Success {\n        success\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.RequestPasswordResetDocument,
    "\n  mutation ResetPassword($token: String!, $password: String!) {\n    resetPassword(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on PasswordResetTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on PasswordResetTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.ResetPasswordDocument,
    "\n  mutation VerifyCustomerAccount($token: String!, $password: String) {\n    verifyCustomerAccount(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on VerificationTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on VerificationTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on PasswordAlreadySetError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.VerifyCustomerAccountDocument,
    "\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n": types.UpdateCustomerDocument,
    "\n  mutation UpdateCustomerPassword($currentPassword: String!, $newPassword: String!) {\n    updateCustomerPassword(currentPassword: $currentPassword, newPassword: $newPassword) {\n      ... on Success {\n        success\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.UpdateCustomerPasswordDocument,
    "\n  query GetActiveOrder {\n    activeOrder {\n      id\n      code\n      state\n      totalQuantity\n      subTotal\n      shipping\n      total\n      lines {\n        id\n        quantity\n        unitPrice\n        linePrice\n        productVariant {\n          id\n          name\n          product {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetActiveOrderDocument,
    "\n  mutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {\n    addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n      ... on Order {\n        id\n        code\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.AddItemToOrderDocument,
    "\n  mutation RemoveOrderLine($orderLineId: ID!) {\n    removeOrderLine(orderLineId: $orderLineId) {\n      ... on Order {\n        id\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.RemoveOrderLineDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveCustomer {\n    activeCustomer {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n"): (typeof documents)["\n  query GetActiveCustomer {\n    activeCustomer {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($username: String!, $password: String!, $rememberMe: Boolean) {\n    login(username: $username, password: $password, rememberMe: $rememberMe) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RegisterCustomer($input: RegisterCustomerInput!) {\n    registerCustomerAccount(input: $input) {\n      ... on Success {\n        success\n      }\n      ... on MissingPasswordError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RegisterCustomer($input: RegisterCustomerInput!) {\n    registerCustomerAccount(input: $input) {\n      ... on Success {\n        success\n      }\n      ... on MissingPasswordError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RequestPasswordReset($emailAddress: String!) {\n    requestPasswordReset(emailAddress: $emailAddress) {\n      ... on Success {\n        success\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RequestPasswordReset($emailAddress: String!) {\n    requestPasswordReset(emailAddress: $emailAddress) {\n      ... on Success {\n        success\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResetPassword($token: String!, $password: String!) {\n    resetPassword(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on PasswordResetTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on PasswordResetTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ResetPassword($token: String!, $password: String!) {\n    resetPassword(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on PasswordResetTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on PasswordResetTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VerifyCustomerAccount($token: String!, $password: String) {\n    verifyCustomerAccount(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on VerificationTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on VerificationTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on PasswordAlreadySetError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyCustomerAccount($token: String!, $password: String) {\n    verifyCustomerAccount(token: $token, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n      }\n      ... on VerificationTokenInvalidError {\n        errorCode\n        message\n      }\n      ... on VerificationTokenExpiredError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on PasswordAlreadySetError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomer($input: UpdateCustomerInput!) {\n    updateCustomer(input: $input) {\n      id\n      title\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCustomerPassword($currentPassword: String!, $newPassword: String!) {\n    updateCustomerPassword(currentPassword: $currentPassword, newPassword: $newPassword) {\n      ... on Success {\n        success\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomerPassword($currentPassword: String!, $newPassword: String!) {\n    updateCustomerPassword(currentPassword: $currentPassword, newPassword: $newPassword) {\n      ... on Success {\n        success\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveOrder {\n    activeOrder {\n      id\n      code\n      state\n      totalQuantity\n      subTotal\n      shipping\n      total\n      lines {\n        id\n        quantity\n        unitPrice\n        linePrice\n        productVariant {\n          id\n          name\n          product {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetActiveOrder {\n    activeOrder {\n      id\n      code\n      state\n      totalQuantity\n      subTotal\n      shipping\n      total\n      lines {\n        id\n        quantity\n        unitPrice\n        linePrice\n        productVariant {\n          id\n          name\n          product {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {\n    addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n      ... on Order {\n        id\n        code\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {\n    addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n      ... on Order {\n        id\n        code\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveOrderLine($orderLineId: ID!) {\n    removeOrderLine(orderLineId: $orderLineId) {\n      ... on Order {\n        id\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveOrderLine($orderLineId: ID!) {\n    removeOrderLine(orderLineId: $orderLineId) {\n      ... on Order {\n        id\n        totalQuantity\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;