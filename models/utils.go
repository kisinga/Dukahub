// Autogenerated by github.com/snonky/pocketbase-gogen. Do not edit.
package models

import (
	"errors"

	"github.com/pocketbase/pocketbase/core"
)

type Proxy interface {
	Admins | DailyStockTakes | DailyAccounts | AccountTypes | Skus | Products | Partners | Invoices | Purchases | Companies | CompanyAccounts | Transactions | Sales | Expenses | OpenCloseDetails | ProductSkuFigures | Models | ProductCategories
}

// This interface constrains a type parameter of
// a Proxy core type into its pointer type.
// This grants generic functions access to the
// core and the pointer type at the same time.
//
// Such a generic function looks like this:
//
//	func MyFunc[P Proxy, PP ProxyP[P]]() {
//	  // The function can create the zero-value
//	  // of P and knows its pointer type PP!
//	  var _ PP = &P{}
//	}
//
// The PP parameter can be inferred by the
// compiler so this convenient call becomes
// possible:
//
//	MyFunc[ProxyType]()
//
// The opposite inference direction is also
// possible:
//
//	func MyFunc[PP ProxyP[P], P Proxy]()
//
// Can be called like this:
//
//	MyFunc[*ProxyType]()
//
// And even works with other type paramters:
//
//	func MyFunc2[P Proxy, PP ProxyP[P]]() {
//	    MyFunc[PP]()
//	}
type ProxyP[P Proxy] interface {
	*P
	core.RecordProxy
	CollectionName() string
}

// Returns the collection name of a proxy type
//
//	collectionName := CName[ProxyType]()
func CName[P Proxy, PP ProxyP[P]]() string {
	return PP.CollectionName(nil)
}

// Creates a new record and wraps it in a new proxy
//
//	proxy := NewProxy[ProxyType](app)
func NewProxy[P Proxy, PP ProxyP[P]](app core.App) (PP, error) {
	var p PP = &P{}
	collectionName := p.CollectionName()
	collection, err := app.FindCachedCollectionByNameOrId(collectionName)
	if err != nil {
		return nil, err
	}
	record := core.NewRecord(collection)
	p.SetProxyRecord(record)
	return p, nil
}

// Wraps a record in a newly created proxy
//
//	proxy := WrapRecord[ProxyType](record)
func WrapRecord[P Proxy, PP ProxyP[P]](record *core.Record) (PP, error) {
	collectionName := record.Collection().Name
	proxyCollectionName := PP.CollectionName(nil)
	if collectionName != proxyCollectionName {
		return nil, errors.New("the generic proxy type is not of the same collection as the given record")
	}
	var p PP = &P{}
	p.SetProxyRecord(record)
	return p, nil
}

type RelationField struct {
	FieldName string
	IsMulti   bool
}

// This map contains all relations between the collections that
// have a proxy struct with a CollectionName() method.
// It maps like this:
//
//	collection name
//	 -> collection names that it is related to
//	  -> list of fields that contain the relation values
var Relations = map[string]map[string][]RelationField{
	"admins": {
		"companies": {
			{"company", true},
			{"defaultCompany", false},
		},
	},
	"daily_stock_takes": {
		"admins": {
			{"user", false},
		},
		"skus": {
			{"sku", false},
		},
		"products": {
			{"product", false},
		},
		"companies": {
			{"company", false},
		},
	},
	"daily_accounts": {
		"admins": {
			{"user", false},
		},
		"companies": {
			{"company", false},
		},
		"company_accounts": {
			{"account", false},
		},
	},
	"products": {
		"skus": {
			{"skus", true},
		},
		"companies": {
			{"company", false},
		},
		"product_categories": {
			{"category", true},
		},
	},
	"partners": {
		"companies": {
			{"company", false},
		},
	},
	"invoices": {
		"admins": {
			{"user", false},
		},
		"partners": {
			{"partner", false},
		},
		"companies": {
			{"company", false},
		},
		"transactions": {
			{"transactions", true},
		},
	},
	"purchases": {
		"admins": {
			{"user", false},
		},
		"skus": {
			{"sku", false},
		},
		"products": {
			{"product", false},
		},
		"invoices": {
			{"invoice", false},
		},
		"companies": {
			{"company", false},
		},
		"transactions": {
			{"transaction", false},
		},
	},
	"company_accounts": {
		"account_types": {
			{"type", false},
		},
		"companies": {
			{"company", false},
		},
	},
	"transactions": {
		"companies": {
			{"company", false},
		},
		"company_accounts": {
			{"account", false},
		},
	},
	"sales": {
		"skus": {
			{"sku", false},
		},
		"products": {
			{"Product", false},
		},
		"invoices": {
			{"invoice", false},
		},
		"companies": {
			{"company", false},
		},
		"transactions": {
			{"transaction", true},
		},
	},
	"expenses": {
		"transactions": {
			{"transaction", false},
		},
	},
	"open_close_details": {
		"admins": {
			{"user", false},
		},
	},
	"product_sku_figures": {
		"skus": {
			{"sku", false},
		},
		"products": {
			{"product", false},
		},
	},
	"models": {
		"companies": {
			{"company", false},
		},
	},
	"product_categories": {
		"companies": {
			{"company", false},
		},
	},
}
