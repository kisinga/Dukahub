// Autogenerated by github.com/snonky/pocketbase-gogen.
// Please feel free to edit after noting the explanation:
//
// This file is an intermediate product of the proxy generation.
// It is called a 'schema as code' or just 'template'. It is not meant to be
// compiled it is only meant for human interaction, place it in a separate package
// but never import it.
// Here's what you can do to influence the final code generation step:
//
// Do:
//   - Edit the struct names. The names are directly copied to the proxy struct definitions.
//   - Remove structs or fields that you don't want in the generated code. Note that upon removing a struct
//     you also have to remove any fields that have that struct as their type.
//   - Edit the type name in the '// select:' comments.
//   - Change the const names of the select options by adding a pair of [] to the // select: comment.
//     Example: // select: MySelectType(optionA, optionB)[OpA, OpB] <-- These constants will represent
//     the select options (like an enum). If you omit the [] the option names are used directly.
//   - Edit the field names. If you do, the generator still needs to know the original database field name.
//     To provide this, add a '// schema-name: [original field name]' comment directly above the field.
//   - Add methods to the template structs. The generator will replace any fields you access with the also
//     generated getters/setters. Be aware of that when repeatedly assigning a template field. You are
//     calling a setter on every assignment. The methods can also call each other.
//
// Do not:
//   - Add structs that do not represent a PB collection.
//   - Add fields that are not part of the PB schema to the structs.
//   - Change the '// collection-name:' comments unless the collection was actually renamed.
//     If the comment is missing from the first struct field, the generator will print a warning.
//   - Change the select values in the () of the '// select:' comments'
//   - Remove the '// system:' doc comments from the system fields. Generation will fail if you do so.
//   - Shadow any names from the core.Record struct. Generation will also fail for safety.
//   - Rename fields without preserving the original name with a '// schema-name:' comment.'
//
// If you edit this file, be careful and back it up to prevent the changes from being overridden by
// subsequent runs of the template command. Check out the PocketBase docs to find out how to use the
// generated code in your code: https://pocketbase.io/docs/go-record-proxy/
package pbschema

import "github.com/pocketbase/pocketbase/tools/types"

type Admins struct {
	// collection-name: admins
	// system: id
	Id string
	// system: password
	password string
	// system: tokenKey
	tokenKey string
	// system: email
	email string
	// system: emailVisibility
	emailVisibility bool
	// system: verified
	verified bool
	username string
	name     string
	avatar   string
	// select: LevelSelectType(admin, salesperson, accountant)
	level          int
	company        []*Companies
	defaultCompany *Companies
	created        types.DateTime
	updated        types.DateTime
}

type DailyStockTakes struct {
	// collection-name: daily_stock_takes
	// system: id
	Id          string
	product     *Products
	company     *Companies
	user        *Admins
	date        types.DateTime
	sku         *Skus
	opening_bal float64
	closing_bal float64
	created     types.DateTime
	updated     types.DateTime
}

type DailyAccounts struct {
	// collection-name: daily_accounts
	// system: id
	Id          string
	opening_bal int
	closing_bal int
	account     *CompanyAccounts
	notes       string
	company     *Companies
	user        *Admins
	date        types.DateTime
	created     types.DateTime
	updated     types.DateTime
}

type AccountTypes struct {
	// collection-name: account_types
	// system: id
	Id      string
	name    string
	icons   []string
	created types.DateTime
	updated types.DateTime
}

type Skus struct {
	// collection-name: skus
	// system: id
	Id       string
	name     string
	initials string
	created  types.DateTime
	updated  types.DateTime
}

type Products struct {
	// collection-name: products
	// system: id
	Id      string
	name    string
	skus    []*Skus
	company *Companies
	image   string
	created types.DateTime
	updated types.DateTime
}

type Partners struct {
	// collection-name: partners
	// system: id
	Id      string
	name    string
	phone   string
	company *Companies
	balance float64
	created types.DateTime
	updated types.DateTime
}

type Invoices struct {
	// collection-name: invoices
	// system: id
	Id      string
	partner *Partners
	amount  float64
	// select: StatusSelectType(paid, partial, pending)
	status  int
	bal     float64
	company *Companies
	user    *Admins
	// select: TypeSelectType(sale, purchase)
	type_        int
	transactions []*Transactions
	date         types.DateTime
	created      types.DateTime
	updated      types.DateTime
}

type Purchases struct {
	// collection-name: purchases
	// system: id
	Id          string
	product     *Products
	quantity    float64
	sku         *Skus
	company     *Companies
	user        *Admins
	invoice     *Invoices
	transaction *Transactions
	date        types.DateTime
	created     types.DateTime
	updated     types.DateTime
}

type Companies struct {
	// collection-name: companies
	// system: id
	Id       string
	logo     string
	location string
	name     string
	phone    string
	created  types.DateTime
	updated  types.DateTime
}

type CompanyAccounts struct {
	// collection-name: company_accounts
	// system: id
	Id             string
	account_number string
	name           string
	type_          *AccountTypes
	company        *Companies
	bal            float64
	icon_id        int
	created        types.DateTime
	updated        types.DateTime
}

type Transactions struct {
	// collection-name: transactions
	// system: id
	Id      string
	company *Companies
	account *CompanyAccounts
	// select: TypeSelectType(debit, credit)
	type_          int
	amount         float64
	transaction_id string
	date           types.DateTime
	created        types.DateTime
	updated        types.DateTime
}

type Sales struct {
	// collection-name: sales
	// system: id
	Id          string
	amount      float64
	sku         *Skus
	Product     *Products
	company     *Companies
	invoice     *Invoices
	transaction []*Transactions
	date        types.DateTime
	created     types.DateTime
	updated     types.DateTime
}

type Expenses struct {
	// collection-name: expenses
	// system: id
	Id          string
	amount      float64
	purpose     string
	transaction *Transactions
	created     types.DateTime
	updated     types.DateTime
}

type OpenCloseDetails struct {
	// collection-name: open_close_details
	// system: id
	Id   string
	date types.DateTime
	// select: StatusSelectType(open, closed)
	status     int
	open_time  types.DateTime
	close_time types.DateTime
	user       *Admins
	created    types.DateTime
	updated    types.DateTime
}

type ProductSkuFigures struct {
	// collection-name: product_sku_figures
	// system: id
	Id      string
	bal     float64
	price   float64
	sku     *Skus
	product *Products
	created types.DateTime
	updated types.DateTime
}
